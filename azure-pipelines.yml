trigger:
- release/*
  
pool:
  vmImage: windows-latest

parameters:
- name: skipCI
  type: boolean
  default: false
- name: forceDeploy
  type: boolean
  default: false

variables:
- name: buildConfiguration
  value: 'Release'

resources:
  repositories:
  - repository: inss-devops-common-lib
    type: github
    endpoint: InsolvencyService
    name: InsolvencyService/inss-devops-common-lib
    ref: develop
    
stages:
- stage: BuildTest
  condition: ${{ ne(parameters.skipCI, true) }}
  displayName: 'Build and Test'
  jobs:  
    - job: 
      steps:
      - task: UseDotNet@2
        inputs:
          version: '6.0.x'

      - task: DotNetCoreCLI@2
        displayName: NuGet Restore
        inputs:
          command: 'restore'
          projects: '**/Insolvency.CalculationsEngine.sln'
  
      - task: DotNetCoreCLI@2
        displayName: 'Build Solution'
        inputs:
          command: 'build'
          projects: '**/Insolvency.CalculationsEngine.sln'
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'Run Tests'
        inputs:
          command: test
          projects: '**/*Tests/*.csproj'
          arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

      - task: DotNetCoreCLI@2
        displayName: 'Publish Project'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '**/*.csproj'
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifact'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'Insolvency.CalculationsEngine'
#        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- stage: DeployDev
  condition: or(and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.forceDeploy }}, true))
  dependsOn: BuildTest
#  pool:
#    name: RPS
#    demands:
#    - Agent.Label -equals CALCENGINE-Dev
  displayName: 'Deploy to Dev'
  variables:
    - group: CALCENGINE-Dev
  jobs:
    - template: deploy-jobs-template.yml
      parameters:
        environment: 'Dev'
        appInsightsConnectionString: $(AppInsightsConnectionString)

- stage: DeploySIT
  condition: or(and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.forceDeploy }}, true))
  dependsOn: BuildTest
  # pool:
  #   name: RPS
  #   demands:
  #   - Agent.Label -equals CALCENGINE-SIT
  displayName: 'Deploy to SIT'
  variables:
    - group: CALCENGINE-SIT
  jobs:
    - template: deploy-jobs-template.yml
      parameters:
        environment: 'SIT'
        appInsightsConnectionString: $(AppInsightsConnectionString)

